/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var bloom_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_option0":4,"program_option1":5,"EOF":6,"state_block":7,"STATE":8,"DO":9,"state_block_repetition0":10,"END":11,"state_decl":12,"CHANNEL":13,"ID":14,",":15,"field_list":16,"=>":17,"collection_type":18,"TABLE":19,"SCRATCH":20,"INTERFACE":21,"LOOPBACK":22,"PERIODIC":23,"[":24,"field_list_repetition0":25,"field_list_option0":26,"]":27,"bloom_block":28,"BLOOM":29,"bloom_block_repetition0":30,"bloom_stmt":31,"bloom_op":32,"primary":33,"<=":34,"<~":35,"<+-":36,"<+":37,"<-":38,"expression":39,"or_test":40,"?":41,":":42,"and_test":43,"||":44,"not_test":45,"&&":46,"comparison":47,"!":48,"STR_LIT":49,"NUM_LIT":50,"parenth_form":51,"arr_display":52,"obj_display":53,"property_ref":54,"subscription":55,"call":56,"(":57,")":58,"expression_list":59,"expression_list_repetition0":60,"expression_list_option0":61,"{":62,"obj_display_repetition0":63,"obj_display_option0":64,"}":65,"kv_pair":66,".":67,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"STATE",9:"DO",11:"END",13:"CHANNEL",14:"ID",15:",",17:"=>",19:"TABLE",20:"SCRATCH",21:"INTERFACE",22:"LOOPBACK",23:"PERIODIC",24:"[",27:"]",29:"BLOOM",34:"<=",35:"<~",36:"<+-",37:"<+",38:"<-",41:"?",42:":",44:"||",46:"&&",48:"!",49:"STR_LIT",50:"NUM_LIT",57:"(",58:")",62:"{",65:"}",67:"."},
productions_: [0,[3,3],[7,4],[12,2],[12,4],[12,6],[12,2],[12,4],[12,6],[18,1],[18,1],[18,1],[18,1],[18,1],[16,4],[28,4],[31,3],[32,1],[32,1],[32,1],[32,1],[32,1],[39,1],[39,5],[40,1],[40,3],[43,1],[43,3],[45,1],[45,2],[47,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[51,3],[52,3],[59,2],[53,4],[66,3],[54,3],[55,4],[56,4],[4,0],[4,1],[5,0],[5,1],[10,0],[10,2],[25,0],[25,3],[26,0],[26,1],[30,0],[30,2],[60,0],[60,3],[61,0],[61,1],[63,0],[63,3],[64,0],[64,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return ast.program($$[$0-2], $$[$0-1]); 
break;
case 2:this.$ = ast.stateBlock($$[$0-1]);
break;
case 3:this.$ = ast.stateDecl($$[$0-1], $$[$0], ['address', 'val'], []);
break;
case 4:this.$ = ast.stateDecl($$[$0-3], $$[$0-2], $$[$0], []);
break;
case 5:this.$ = ast.stateDecl($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 6:this.$ = ast.stateDecl($$[$0-1], $$[$0], ['key'], ['val']);
break;
case 7:this.$ = ast.stateDecl($$[$0-3], $$[$0-2], $$[$0], ['val']);
break;
case 8:this.$ = ast.stateDecl($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 14:this.$ = $$[$0-1] === undefined ? $$[$0-2] : $$[$0-2].concat([$$[$0-1]]);
break;
case 15:this.$ = ast.bloomBlock($$[$0-1]);
break;
case 16:this.$ = ast.bloomStmt($$[$0-2], $$[$0-1], $$[$0]);
break;
case 40:this.$ = $$[$0-1];
break;
case 41:this.$ = ast.arrDisplay($$[$0-1]);
break;
case 42:this.$ = $$[$0] === undefined ? $$[$0-1] : $$[$0-1].concat([$$[$0]]);
break;
case 43:this.$ = ast.objDisplay($$[$0-1] === undefined ? $$[$0-2] : $$[$0-2].concat([$$[$0-1]]));
break;
case 44:this.$ = [$$[$0-2], $$[$0]];
break;
case 45:this.$ = ast.propertyRef($$[$0-2], $$[$0]);
break;
case 46:this.$ = ast.subscription($$[$0-3], $$[$0-1]);
break;
case 47:this.$ = ast.call($$[$0-3], $$[$0-1]);
break;
case 52:this.$ = [];
break;
case 53:$$[$0-1].push($$[$0]);
break;
case 54:this.$ = [];
break;
case 55:$$[$0-2].push($$[$0-1]);
break;
case 58:this.$ = [];
break;
case 59:$$[$0-1].push($$[$0]);
break;
case 60:this.$ = [];
break;
case 61:$$[$0-2].push($$[$0-1]);
break;
case 64:this.$ = [];
break;
case 65:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{3:1,4:2,6:[2,48],7:3,8:[1,4],29:[2,48]},{1:[3]},{5:5,6:[2,50],28:6,29:[1,7]},{6:[2,49],29:[2,49]},{9:[1,8]},{6:[1,9]},{6:[2,51]},{9:[1,10]},{10:11,11:[2,52],13:[2,52],19:[2,52],20:[2,52],21:[2,52],22:[2,52],23:[2,52]},{1:[2,1]},{11:[2,58],14:[2,58],30:12},{11:[1,13],12:14,13:[1,15],18:16,19:[1,17],20:[1,18],21:[1,19],22:[1,20],23:[1,21]},{11:[1,22],14:[1,24],31:23},{6:[2,2],29:[2,2]},{11:[2,53],13:[2,53],19:[2,53],20:[2,53],21:[2,53],22:[2,53],23:[2,53]},{14:[1,25]},{14:[1,26]},{14:[2,9]},{14:[2,10]},{14:[2,11]},{14:[2,12]},{14:[2,13]},{6:[2,15]},{11:[2,59],14:[2,59]},{32:27,34:[1,28],35:[1,29],36:[1,30],37:[1,31],38:[1,32]},{11:[2,3],13:[2,3],15:[1,33],19:[2,3],20:[2,3],21:[2,3],22:[2,3],23:[2,3]},{11:[2,6],13:[2,6],15:[1,34],19:[2,6],20:[2,6],21:[2,6],22:[2,6],23:[2,6]},{14:[1,36],24:[1,46],33:35,49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47]},{14:[2,17],24:[2,17],49:[2,17],50:[2,17],57:[2,17],62:[2,17]},{14:[2,18],24:[2,18],49:[2,18],50:[2,18],57:[2,18],62:[2,18]},{14:[2,19],24:[2,19],49:[2,19],50:[2,19],57:[2,19],62:[2,19]},{14:[2,20],24:[2,20],49:[2,20],50:[2,20],57:[2,20],62:[2,20]},{14:[2,21],24:[2,21],49:[2,21],50:[2,21],57:[2,21],62:[2,21]},{16:48,24:[1,49]},{16:50,24:[1,49]},{11:[2,16],14:[2,16],24:[1,52],57:[1,53],67:[1,51]},{11:[2,31],14:[2,31],15:[2,31],24:[2,31],27:[2,31],41:[2,31],42:[2,31],44:[2,31],46:[2,31],57:[2,31],58:[2,31],65:[2,31],67:[2,31]},{11:[2,32],14:[2,32],15:[2,32],24:[2,32],27:[2,32],41:[2,32],42:[2,32],44:[2,32],46:[2,32],57:[2,32],58:[2,32],65:[2,32],67:[2,32]},{11:[2,33],14:[2,33],15:[2,33],24:[2,33],27:[2,33],41:[2,33],42:[2,33],44:[2,33],46:[2,33],57:[2,33],58:[2,33],65:[2,33],67:[2,33]},{11:[2,34],14:[2,34],15:[2,34],24:[2,34],27:[2,34],41:[2,34],42:[2,34],44:[2,34],46:[2,34],57:[2,34],58:[2,34],65:[2,34],67:[2,34]},{11:[2,35],14:[2,35],15:[2,35],24:[2,35],27:[2,35],41:[2,35],42:[2,35],44:[2,35],46:[2,35],57:[2,35],58:[2,35],65:[2,35],67:[2,35]},{11:[2,36],14:[2,36],15:[2,36],24:[2,36],27:[2,36],41:[2,36],42:[2,36],44:[2,36],46:[2,36],57:[2,36],58:[2,36],65:[2,36],67:[2,36]},{11:[2,37],14:[2,37],15:[2,37],24:[2,37],27:[2,37],41:[2,37],42:[2,37],44:[2,37],46:[2,37],57:[2,37],58:[2,37],65:[2,37],67:[2,37]},{11:[2,38],14:[2,38],15:[2,38],24:[2,38],27:[2,38],41:[2,38],42:[2,38],44:[2,38],46:[2,38],57:[2,38],58:[2,38],65:[2,38],67:[2,38]},{11:[2,39],14:[2,39],15:[2,39],24:[2,39],27:[2,39],41:[2,39],42:[2,39],44:[2,39],46:[2,39],57:[2,39],58:[2,39],65:[2,39],67:[2,39]},{14:[1,36],24:[1,46],33:60,39:54,40:55,43:56,45:57,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47]},{14:[2,60],24:[2,60],27:[2,60],48:[2,60],49:[2,60],50:[2,60],57:[2,60],59:61,60:62,62:[2,60]},{14:[2,64],24:[2,64],48:[2,64],49:[2,64],50:[2,64],57:[2,64],62:[2,64],63:63,65:[2,64]},{11:[2,4],13:[2,4],17:[1,64],19:[2,4],20:[2,4],21:[2,4],22:[2,4],23:[2,4]},{14:[2,54],25:65,27:[2,54]},{11:[2,7],13:[2,7],17:[1,66],19:[2,7],20:[2,7],21:[2,7],22:[2,7],23:[2,7]},{14:[1,67]},{14:[1,36],24:[1,46],33:60,39:68,40:55,43:56,45:57,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47]},{14:[2,60],24:[2,60],48:[2,60],49:[2,60],50:[2,60],57:[2,60],58:[2,60],59:69,60:62,62:[2,60]},{58:[1,70]},{15:[2,22],27:[2,22],41:[1,71],42:[2,22],44:[1,72],58:[2,22],65:[2,22]},{15:[2,24],27:[2,24],41:[2,24],42:[2,24],44:[2,24],46:[1,73],58:[2,24],65:[2,24]},{15:[2,26],27:[2,26],41:[2,26],42:[2,26],44:[2,26],46:[2,26],58:[2,26],65:[2,26]},{15:[2,28],27:[2,28],41:[2,28],42:[2,28],44:[2,28],46:[2,28],58:[2,28],65:[2,28]},{14:[1,36],24:[1,46],33:60,45:74,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47]},{15:[2,30],24:[1,52],27:[2,30],41:[2,30],42:[2,30],44:[2,30],46:[2,30],57:[1,53],58:[2,30],65:[2,30],67:[1,51]},{27:[1,75]},{14:[1,36],24:[1,46],27:[2,62],33:60,39:77,40:55,43:56,45:57,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],58:[2,62],61:76,62:[1,47]},{14:[1,36],24:[1,46],33:60,39:80,40:55,43:56,45:57,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47],64:78,65:[2,66],66:79},{16:81,24:[1,49]},{14:[1,83],26:82,27:[2,56]},{16:84,24:[1,49]},{11:[2,45],14:[2,45],15:[2,45],24:[2,45],27:[2,45],41:[2,45],42:[2,45],44:[2,45],46:[2,45],57:[2,45],58:[2,45],65:[2,45],67:[2,45]},{27:[1,85]},{58:[1,86]},{11:[2,40],14:[2,40],15:[2,40],24:[2,40],27:[2,40],41:[2,40],42:[2,40],44:[2,40],46:[2,40],57:[2,40],58:[2,40],65:[2,40],67:[2,40]},{14:[1,36],24:[1,46],33:60,39:87,40:55,43:56,45:57,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47]},{14:[1,36],24:[1,46],33:60,43:88,45:57,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47]},{14:[1,36],24:[1,46],33:60,45:89,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47]},{15:[2,29],27:[2,29],41:[2,29],42:[2,29],44:[2,29],46:[2,29],58:[2,29],65:[2,29]},{11:[2,41],14:[2,41],15:[2,41],24:[2,41],27:[2,41],41:[2,41],42:[2,41],44:[2,41],46:[2,41],57:[2,41],58:[2,41],65:[2,41],67:[2,41]},{27:[2,42],58:[2,42]},{15:[1,90],27:[2,63],58:[2,63]},{65:[1,91]},{15:[1,92],65:[2,67]},{42:[1,93]},{11:[2,5],13:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],23:[2,5]},{27:[1,94]},{15:[1,95],27:[2,57]},{11:[2,8],13:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],23:[2,8]},{11:[2,46],14:[2,46],15:[2,46],24:[2,46],27:[2,46],41:[2,46],42:[2,46],44:[2,46],46:[2,46],57:[2,46],58:[2,46],65:[2,46],67:[2,46]},{11:[2,47],14:[2,47],15:[2,47],24:[2,47],27:[2,47],41:[2,47],42:[2,47],44:[2,47],46:[2,47],57:[2,47],58:[2,47],65:[2,47],67:[2,47]},{42:[1,96]},{15:[2,25],27:[2,25],41:[2,25],42:[2,25],44:[2,25],46:[1,73],58:[2,25],65:[2,25]},{15:[2,27],27:[2,27],41:[2,27],42:[2,27],44:[2,27],46:[2,27],58:[2,27],65:[2,27]},{14:[2,61],24:[2,61],27:[2,61],48:[2,61],49:[2,61],50:[2,61],57:[2,61],58:[2,61],62:[2,61]},{11:[2,43],14:[2,43],15:[2,43],24:[2,43],27:[2,43],41:[2,43],42:[2,43],44:[2,43],46:[2,43],57:[2,43],58:[2,43],65:[2,43],67:[2,43]},{14:[2,65],24:[2,65],48:[2,65],49:[2,65],50:[2,65],57:[2,65],62:[2,65],65:[2,65]},{14:[1,36],24:[1,46],33:60,39:97,40:55,43:56,45:57,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47]},{11:[2,14],13:[2,14],17:[2,14],19:[2,14],20:[2,14],21:[2,14],22:[2,14],23:[2,14]},{14:[2,55],27:[2,55]},{14:[1,36],24:[1,46],33:60,39:98,40:55,43:56,45:57,47:58,48:[1,59],49:[1,37],50:[1,38],51:39,52:40,53:41,54:42,55:43,56:44,57:[1,45],62:[1,47]},{15:[2,44],65:[2,44]},{15:[2,23],27:[2,23],42:[2,23],58:[2,23],65:[2,23]}],
defaultActions: {6:[2,51],9:[2,1],17:[2,9],18:[2,10],19:[2,11],20:[2,12],21:[2,13],22:[2,15]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var ast = require('./bloom_ast');

/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 8
break;
case 2:return 29
break;
case 3:return 19
break;
case 4:return 20
break;
case 5:return 21
break;
case 6:return 13
break;
case 7:return 22
break;
case 8:return 23
break;
case 9:return 9
break;
case 10:return 11
break;
case 11:return 49
break;
case 12:return 50
break;
case 13:return 14
break;
case 14:return 6
break;
case 15:return 67
break;
case 16:return 15
break;
case 17:return 42
break;
case 18:return 57
break;
case 19:return 58
break;
case 20:return 24
break;
case 21:return 27
break;
case 22:return 62
break;
case 23:return 65
break;
case 24:return 17
break;
case 25:return 34
break;
case 26:return 35
break;
case 27:return 36
break;
case 28:return 37
break;
case 29:return 38
break;
case 30:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:state\b)/,/^(?:bloom\b)/,/^(?:table\b)/,/^(?:scratch\b)/,/^(?:interface\b)/,/^(?:channel\b)/,/^(?:loopback\b)/,/^(?:periodic\b)/,/^(?:do\b)/,/^(?:end\b)/,/^(?:(("([^"\\]|\\.)*"|'([^'\\]|\\.)*')))/,/^(?:((\+|)?([0-9]+(\.[0-9]*)?|\.[0-9]+)))/,/^(?:([_A-Za-z][_A-Za-z0-9]*))/,/^(?:$)/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:=>)/,/^(?:<=)/,/^(?:<~)/,/^(?:<\+-)/,/^(?:<\+)/,/^(?:<-)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = bloom_parser;
exports.Parser = bloom_parser.Parser;
exports.parse = function () { return bloom_parser.parse.apply(bloom_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}