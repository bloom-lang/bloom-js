/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var bloom_parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition0":4,"program_repetition1":5,"program_option0":6,"outer_stmt":7,"class_block":8,"simple_stmt":9,"CLASS":10,"ID":11,"\\n":12,"class_block_repetition0":13,"END":14,"class_stmt":15,"state_block":16,"bloom_block":17,"STATE":18,"DO":19,"state_block_repetition0":20,"state_decl":21,"CHANNEL":22,"primary":23,",":24,"field_list":25,"=>":26,"collection_type":27,"TABLE":28,"SCRATCH":29,"INTERFACE":30,"LOOPBACK":31,"PERIODIC":32,"[":33,"field_list_repetition0":34,"field_list_option0":35,"]":36,"BLOOM":37,"bloom_block_option0":38,"bloom_block_repetition0":39,"bloom_stmt":40,"expression":41,"bloom_op":42,"<:":43,"<~":44,"<+-":45,"<+":46,"<-":47,"assignment_stmt":48,"puts_stmt":49,"=":50,"PUTS":51,"expression_list":52,"or_test":53,"?":54,":":55,"if":56,"else":57,"and_test":58,"or_test_group0":59,"not_test":60,"and_test_group0":61,"comparison":62,"not_test_group0":63,"a_expr":64,"comparison_group0":65,"m_expr":66,"a_expr_group0":67,"u_expr":68,"m_expr_group0":69,"power":70,"u_expr_group0":71,"**":72,"STR_LIT":73,"NUM_LIT":74,"parenth_form":75,"arr_display":76,"hash_display":77,"attribute_ref":78,"subscription":79,"call":80,"primary_block":81,"(":82,")":83,"expression_list_repetition0":84,"expression_list_option0":85,"{":86,"hash_display_repetition0":87,"hash_display_option0":88,"}":89,"kv_pair":90,".":91,"|":92,"id_list":93,"primary_block_repetition0":94,"id_list_repetition0":95,"id_list_option0":96,"program_repetition1_group0":97,"EOF":98,"||":99,"or":100,"&&":101,"and":102,"!":103,"not":104,"<":105,">":106,"==":107,"<=":108,">=":109,"!=":110,"+":111,"-":112,"*":113,"/":114,"%":115,"$accept":0,"$end":1},
terminals_: {2:"error",10:"CLASS",11:"ID",12:"\\n",14:"END",18:"STATE",19:"DO",22:"CHANNEL",24:",",26:"=>",28:"TABLE",29:"SCRATCH",30:"INTERFACE",31:"LOOPBACK",32:"PERIODIC",33:"[",36:"]",37:"BLOOM",43:"<:",44:"<~",45:"<+-",46:"<+",47:"<-",50:"=",51:"PUTS",54:"?",55:":",56:"if",57:"else",72:"**",73:"STR_LIT",74:"NUM_LIT",82:"(",83:")",86:"{",89:"}",91:".",92:"|",98:"EOF",99:"||",100:"or",101:"&&",102:"and",103:"!",104:"not",105:"<",106:">",107:"==",108:"<=",109:">=",110:"!=",111:"+",112:"-",113:"*",114:"/",115:"%"},
productions_: [0,[3,3],[7,1],[7,1],[8,5],[15,1],[15,1],[15,1],[16,5],[21,2],[21,4],[21,6],[21,2],[21,4],[21,6],[27,1],[27,1],[27,1],[27,1],[27,1],[25,4],[17,6],[40,3],[42,1],[42,1],[42,1],[42,1],[42,1],[9,1],[9,1],[9,1],[9,1],[48,3],[49,2],[41,1],[41,5],[41,5],[53,1],[53,3],[58,1],[58,3],[60,1],[60,2],[62,1],[62,3],[64,1],[64,3],[66,1],[66,3],[68,1],[68,2],[70,1],[70,3],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[75,3],[76,3],[52,2],[77,4],[90,3],[78,3],[79,4],[80,4],[81,7],[81,8],[93,2],[4,0],[4,2],[97,1],[97,1],[5,0],[5,3],[6,0],[6,1],[13,0],[13,3],[20,0],[20,3],[34,0],[34,3],[35,0],[35,1],[38,0],[38,1],[39,0],[39,3],[59,1],[59,1],[61,1],[61,1],[63,1],[63,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[67,1],[67,1],[69,1],[69,1],[69,1],[71,1],[71,1],[84,0],[84,3],[85,0],[85,1],[87,0],[87,3],[88,0],[88,1],[94,0],[94,3],[95,0],[95,3],[96,0],[96,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: console.log(JSON.stringify(ast.program($$[$0-1]), null, 2));
        return ast.program($$[$0-1]); 
break;
case 4:this.$ = ast.classBlock($$[$0-1]);
break;
case 8:this.$ = ast.stateBlock($$[$0-1]);
break;
case 9:this.$ = ast.stateDecl($$[$0-1], $$[$0], ['address', 'val'], []);
break;
case 10:this.$ = ast.stateDecl($$[$0-3], $$[$0-2], $$[$0], []);
break;
case 11:this.$ = ast.stateDecl($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 12:this.$ = ast.stateDecl($$[$0-1], $$[$0], ['key'], ['val']);
break;
case 13:this.$ = ast.stateDecl($$[$0-3], $$[$0-2], $$[$0], []);
break;
case 14:this.$ = ast.stateDecl($$[$0-5], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 20:this.$ = $$[$0-1] === undefined ? $$[$0-2] : $$[$0-2].concat([$$[$0-1]]);
break;
case 21:this.$ = ast.bloomBlock($$[$0-4], $$[$0-1]);
break;
case 22:this.$ = ast.bloomStmt($$[$0-2], $$[$0-1], $$[$0]);
break;
case 63:this.$ = $$[$0-1];
break;
case 64:this.$ = ast.arrDisplay($$[$0-1]);
break;
case 65:this.$ = $$[$0] === undefined ? $$[$0-1] : $$[$0-1].concat([$$[$0]]);
break;
case 66:this.$ = ast.hashDisplay($$[$0-1] === undefined ? $$[$0-2] : $$[$0-2].concat([$$[$0-1]]));
break;
case 67:this.$ = [$$[$0-2], $$[$0]];
break;
case 68:this.$ = ast.attributeRef($$[$0-2], $$[$0]);
break;
case 69:this.$ = ast.subscription($$[$0-3], $$[$0-1]);
break;
case 70:this.$ = ast.call($$[$0-3], $$[$0-1]);
break;
case 73:this.$ = $$[$0] === undefined ? $$[$0-1] : $$[$0-1].concat([$$[$0]]);
break;
case 74:this.$ = [];
break;
case 75:$$[$0-1].push($$[$0]);
break;
case 78:this.$ = [];
break;
case 79:$$[$0-2].push($$[$0-1]);
break;
case 82:this.$ = [];
break;
case 83:$$[$0-2].push($$[$0-1]);
break;
case 84:this.$ = [];
break;
case 85:$$[$0-2].push($$[$0-1]);
break;
case 86:this.$ = [];
break;
case 87:$$[$0-2].push($$[$0-1]);
break;
case 92:this.$ = [];
break;
case 93:$$[$0-2].push($$[$0-1]);
break;
case 113:this.$ = [];
break;
case 114:$$[$0-2].push($$[$0-1]);
break;
case 117:this.$ = [];
break;
case 118:$$[$0-2].push($$[$0-1]);
break;
case 121:this.$ = [];
break;
case 122:$$[$0-2].push($$[$0-1]);
break;
case 123:this.$ = [];
break;
case 124:$$[$0-2].push($$[$0-1]);
break;
}
},
table: [{1:[2,74],3:1,4:2,10:[2,74],11:[2,74],12:[2,74],33:[2,74],51:[2,74],73:[2,74],74:[2,74],82:[2,74],86:[2,74],98:[2,74],103:[2,74],104:[2,74],111:[2,74],112:[2,74]},{1:[3]},{1:[2,78],5:3,10:[2,78],11:[2,78],12:[1,4],33:[2,78],51:[2,78],73:[2,78],74:[2,78],82:[2,78],86:[2,78],98:[2,78],103:[2,78],104:[2,78],111:[2,78],112:[2,78]},{1:[2,80],6:5,7:6,8:8,9:9,10:[1,10],11:[1,16],23:29,33:[1,42],40:13,41:11,48:12,49:14,51:[1,17],53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],98:[1,7],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{1:[2,75],10:[2,75],11:[2,75],12:[2,75],33:[2,75],51:[2,75],73:[2,75],74:[2,75],82:[2,75],86:[2,75],98:[2,75],103:[2,75],104:[2,75],111:[2,75],112:[2,75]},{1:[2,1]},{12:[1,45],97:44,98:[1,46]},{1:[2,81]},{12:[2,2],98:[2,2]},{12:[2,3],98:[2,3]},{11:[1,47]},{12:[2,28],42:48,43:[1,49],44:[1,50],45:[1,51],46:[1,52],47:[1,53],89:[2,28],98:[2,28]},{12:[2,29],89:[2,29],98:[2,29]},{12:[2,30],89:[2,30],98:[2,30]},{12:[2,31],89:[2,31],98:[2,31]},{12:[2,34],24:[2,34],36:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],54:[1,54],55:[2,34],56:[1,55],59:56,83:[2,34],89:[2,34],98:[2,34],99:[1,57],100:[1,58]},{12:[2,53],19:[2,53],33:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],50:[1,59],54:[2,53],56:[2,53],72:[2,53],82:[2,53],86:[2,53],89:[2,53],91:[2,53],98:[2,53],99:[2,53],100:[2,53],101:[2,53],102:[2,53],105:[2,53],106:[2,53],107:[2,53],108:[2,53],109:[2,53],110:[2,53],111:[2,53],112:[2,53],113:[2,53],114:[2,53],115:[2,53]},{11:[2,113],12:[2,113],33:[2,113],52:60,73:[2,113],74:[2,113],82:[2,113],84:61,86:[2,113],89:[2,113],98:[2,113],103:[2,113],104:[2,113],111:[2,113],112:[2,113]},{12:[2,37],24:[2,37],36:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[2,37],54:[2,37],55:[2,37],56:[2,37],57:[2,37],61:62,83:[2,37],89:[2,37],98:[2,37],99:[2,37],100:[2,37],101:[1,63],102:[1,64]},{12:[2,39],24:[2,39],36:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],54:[2,39],55:[2,39],56:[2,39],57:[2,39],83:[2,39],89:[2,39],98:[2,39],99:[2,39],100:[2,39],101:[2,39],102:[2,39]},{12:[2,41],24:[2,41],36:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],54:[2,41],55:[2,41],56:[2,41],57:[2,41],83:[2,41],89:[2,41],98:[2,41],99:[2,41],100:[2,41],101:[2,41],102:[2,41]},{11:[1,66],23:29,33:[1,42],60:65,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{12:[2,43],24:[2,43],36:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],54:[2,43],55:[2,43],56:[2,43],57:[2,43],65:67,67:68,83:[2,43],89:[2,43],98:[2,43],99:[2,43],100:[2,43],101:[2,43],102:[2,43],105:[1,69],106:[1,70],107:[1,71],108:[1,72],109:[1,73],110:[1,74],111:[1,75],112:[1,76]},{11:[2,98],33:[2,98],73:[2,98],74:[2,98],82:[2,98],86:[2,98],103:[2,98],104:[2,98],111:[2,98],112:[2,98]},{11:[2,99],33:[2,99],73:[2,99],74:[2,99],82:[2,99],86:[2,99],103:[2,99],104:[2,99],111:[2,99],112:[2,99]},{12:[2,45],24:[2,45],36:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],54:[2,45],55:[2,45],56:[2,45],57:[2,45],69:77,83:[2,45],89:[2,45],98:[2,45],99:[2,45],100:[2,45],101:[2,45],102:[2,45],105:[2,45],106:[2,45],107:[2,45],108:[2,45],109:[2,45],110:[2,45],111:[2,45],112:[2,45],113:[1,78],114:[1,79],115:[1,80]},{12:[2,47],24:[2,47],36:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],54:[2,47],55:[2,47],56:[2,47],57:[2,47],83:[2,47],89:[2,47],98:[2,47],99:[2,47],100:[2,47],101:[2,47],102:[2,47],105:[2,47],106:[2,47],107:[2,47],108:[2,47],109:[2,47],110:[2,47],111:[2,47],112:[2,47],113:[2,47],114:[2,47],115:[2,47]},{12:[2,49],24:[2,49],36:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49],83:[2,49],89:[2,49],98:[2,49],99:[2,49],100:[2,49],101:[2,49],102:[2,49],105:[2,49],106:[2,49],107:[2,49],108:[2,49],109:[2,49],110:[2,49],111:[2,49],112:[2,49],113:[2,49],114:[2,49],115:[2,49]},{11:[1,66],23:29,33:[1,42],68:81,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],111:[1,31],112:[1,30]},{12:[2,51],19:[1,87],24:[2,51],33:[1,84],36:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],54:[2,51],55:[2,51],56:[2,51],57:[2,51],72:[1,82],82:[1,85],83:[2,51],86:[1,86],89:[2,51],91:[1,83],98:[2,51],99:[2,51],100:[2,51],101:[2,51],102:[2,51],105:[2,51],106:[2,51],107:[2,51],108:[2,51],109:[2,51],110:[2,51],111:[2,51],112:[2,51],113:[2,51],114:[2,51],115:[2,51]},{11:[2,111],33:[2,111],73:[2,111],74:[2,111],82:[2,111],86:[2,111],111:[2,111],112:[2,111]},{11:[2,112],33:[2,112],73:[2,112],74:[2,112],82:[2,112],86:[2,112],111:[2,112],112:[2,112]},{12:[2,54],19:[2,54],24:[2,54],26:[2,54],33:[2,54],36:[2,54],43:[2,54],44:[2,54],45:[2,54],46:[2,54],47:[2,54],54:[2,54],55:[2,54],56:[2,54],57:[2,54],72:[2,54],82:[2,54],83:[2,54],86:[2,54],89:[2,54],91:[2,54],98:[2,54],99:[2,54],100:[2,54],101:[2,54],102:[2,54],105:[2,54],106:[2,54],107:[2,54],108:[2,54],109:[2,54],110:[2,54],111:[2,54],112:[2,54],113:[2,54],114:[2,54],115:[2,54]},{12:[2,55],19:[2,55],24:[2,55],26:[2,55],33:[2,55],36:[2,55],43:[2,55],44:[2,55],45:[2,55],46:[2,55],47:[2,55],54:[2,55],55:[2,55],56:[2,55],57:[2,55],72:[2,55],82:[2,55],83:[2,55],86:[2,55],89:[2,55],91:[2,55],98:[2,55],99:[2,55],100:[2,55],101:[2,55],102:[2,55],105:[2,55],106:[2,55],107:[2,55],108:[2,55],109:[2,55],110:[2,55],111:[2,55],112:[2,55],113:[2,55],114:[2,55],115:[2,55]},{12:[2,56],19:[2,56],24:[2,56],26:[2,56],33:[2,56],36:[2,56],43:[2,56],44:[2,56],45:[2,56],46:[2,56],47:[2,56],54:[2,56],55:[2,56],56:[2,56],57:[2,56],72:[2,56],82:[2,56],83:[2,56],86:[2,56],89:[2,56],91:[2,56],98:[2,56],99:[2,56],100:[2,56],101:[2,56],102:[2,56],105:[2,56],106:[2,56],107:[2,56],108:[2,56],109:[2,56],110:[2,56],111:[2,56],112:[2,56],113:[2,56],114:[2,56],115:[2,56]},{12:[2,57],19:[2,57],24:[2,57],26:[2,57],33:[2,57],36:[2,57],43:[2,57],44:[2,57],45:[2,57],46:[2,57],47:[2,57],54:[2,57],55:[2,57],56:[2,57],57:[2,57],72:[2,57],82:[2,57],83:[2,57],86:[2,57],89:[2,57],91:[2,57],98:[2,57],99:[2,57],100:[2,57],101:[2,57],102:[2,57],105:[2,57],106:[2,57],107:[2,57],108:[2,57],109:[2,57],110:[2,57],111:[2,57],112:[2,57],113:[2,57],114:[2,57],115:[2,57]},{12:[2,58],19:[2,58],24:[2,58],26:[2,58],33:[2,58],36:[2,58],43:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],54:[2,58],55:[2,58],56:[2,58],57:[2,58],72:[2,58],82:[2,58],83:[2,58],86:[2,58],89:[2,58],91:[2,58],98:[2,58],99:[2,58],100:[2,58],101:[2,58],102:[2,58],105:[2,58],106:[2,58],107:[2,58],108:[2,58],109:[2,58],110:[2,58],111:[2,58],112:[2,58],113:[2,58],114:[2,58],115:[2,58]},{12:[2,59],19:[2,59],24:[2,59],26:[2,59],33:[2,59],36:[2,59],43:[2,59],44:[2,59],45:[2,59],46:[2,59],47:[2,59],54:[2,59],55:[2,59],56:[2,59],57:[2,59],72:[2,59],82:[2,59],83:[2,59],86:[2,59],89:[2,59],91:[2,59],98:[2,59],99:[2,59],100:[2,59],101:[2,59],102:[2,59],105:[2,59],106:[2,59],107:[2,59],108:[2,59],109:[2,59],110:[2,59],111:[2,59],112:[2,59],113:[2,59],114:[2,59],115:[2,59]},{12:[2,60],19:[2,60],24:[2,60],26:[2,60],33:[2,60],36:[2,60],43:[2,60],44:[2,60],45:[2,60],46:[2,60],47:[2,60],54:[2,60],55:[2,60],56:[2,60],57:[2,60],72:[2,60],82:[2,60],83:[2,60],86:[2,60],89:[2,60],91:[2,60],98:[2,60],99:[2,60],100:[2,60],101:[2,60],102:[2,60],105:[2,60],106:[2,60],107:[2,60],108:[2,60],109:[2,60],110:[2,60],111:[2,60],112:[2,60],113:[2,60],114:[2,60],115:[2,60]},{12:[2,61],19:[2,61],24:[2,61],26:[2,61],33:[2,61],36:[2,61],43:[2,61],44:[2,61],45:[2,61],46:[2,61],47:[2,61],54:[2,61],55:[2,61],56:[2,61],57:[2,61],72:[2,61],82:[2,61],83:[2,61],86:[2,61],89:[2,61],91:[2,61],98:[2,61],99:[2,61],100:[2,61],101:[2,61],102:[2,61],105:[2,61],106:[2,61],107:[2,61],108:[2,61],109:[2,61],110:[2,61],111:[2,61],112:[2,61],113:[2,61],114:[2,61],115:[2,61]},{12:[2,62],19:[2,62],24:[2,62],26:[2,62],33:[2,62],36:[2,62],43:[2,62],44:[2,62],45:[2,62],46:[2,62],47:[2,62],54:[2,62],55:[2,62],56:[2,62],57:[2,62],72:[2,62],82:[2,62],83:[2,62],86:[2,62],89:[2,62],91:[2,62],98:[2,62],99:[2,62],100:[2,62],101:[2,62],102:[2,62],105:[2,62],106:[2,62],107:[2,62],108:[2,62],109:[2,62],110:[2,62],111:[2,62],112:[2,62],113:[2,62],114:[2,62],115:[2,62]},{11:[1,66],23:29,33:[1,42],41:88,53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[2,113],33:[2,113],36:[2,113],52:89,73:[2,113],74:[2,113],82:[2,113],84:61,86:[2,113],103:[2,113],104:[2,113],111:[2,113],112:[2,113]},{11:[2,117],33:[2,117],73:[2,117],74:[2,117],82:[2,117],86:[2,117],87:90,89:[2,117]},{1:[2,79],10:[2,79],11:[2,79],33:[2,79],51:[2,79],73:[2,79],74:[2,79],82:[2,79],86:[2,79],98:[2,79],103:[2,79],104:[2,79],111:[2,79],112:[2,79]},{1:[2,76],10:[2,76],11:[2,76],33:[2,76],51:[2,76],73:[2,76],74:[2,76],82:[2,76],86:[2,76],98:[2,76],103:[2,76],104:[2,76],111:[2,76],112:[2,76]},{1:[2,77],10:[2,77],11:[2,77],33:[2,77],51:[2,77],73:[2,77],74:[2,77],82:[2,77],86:[2,77],98:[2,77],103:[2,77],104:[2,77],111:[2,77],112:[2,77]},{12:[1,91]},{11:[1,66],23:92,33:[1,42],73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43]},{11:[2,23],33:[2,23],73:[2,23],74:[2,23],82:[2,23],86:[2,23]},{11:[2,24],33:[2,24],73:[2,24],74:[2,24],82:[2,24],86:[2,24]},{11:[2,25],33:[2,25],73:[2,25],74:[2,25],82:[2,25],86:[2,25]},{11:[2,26],33:[2,26],73:[2,26],74:[2,26],82:[2,26],86:[2,26]},{11:[2,27],33:[2,27],73:[2,27],74:[2,27],82:[2,27],86:[2,27]},{11:[1,66],23:29,33:[1,42],41:93,53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[1,66],23:29,33:[1,42],53:94,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[1,66],23:29,33:[1,42],58:95,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[2,94],33:[2,94],73:[2,94],74:[2,94],82:[2,94],86:[2,94],103:[2,94],104:[2,94],111:[2,94],112:[2,94]},{11:[2,95],33:[2,95],73:[2,95],74:[2,95],82:[2,95],86:[2,95],103:[2,95],104:[2,95],111:[2,95],112:[2,95]},{11:[1,66],23:29,33:[1,42],41:96,53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{12:[2,33],89:[2,33],98:[2,33]},{11:[1,66],12:[2,115],23:29,33:[1,42],36:[2,115],41:98,53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],83:[2,115],85:97,86:[1,43],89:[2,115],98:[2,115],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[1,66],23:29,33:[1,42],60:99,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[2,96],33:[2,96],73:[2,96],74:[2,96],82:[2,96],86:[2,96],103:[2,96],104:[2,96],111:[2,96],112:[2,96]},{11:[2,97],33:[2,97],73:[2,97],74:[2,97],82:[2,97],86:[2,97],103:[2,97],104:[2,97],111:[2,97],112:[2,97]},{12:[2,42],24:[2,42],36:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],54:[2,42],55:[2,42],56:[2,42],57:[2,42],83:[2,42],89:[2,42],98:[2,42],99:[2,42],100:[2,42],101:[2,42],102:[2,42]},{12:[2,53],19:[2,53],24:[2,53],26:[2,53],33:[2,53],36:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],54:[2,53],55:[2,53],56:[2,53],57:[2,53],72:[2,53],82:[2,53],83:[2,53],86:[2,53],89:[2,53],91:[2,53],98:[2,53],99:[2,53],100:[2,53],101:[2,53],102:[2,53],105:[2,53],106:[2,53],107:[2,53],108:[2,53],109:[2,53],110:[2,53],111:[2,53],112:[2,53],113:[2,53],114:[2,53],115:[2,53]},{11:[1,66],23:29,33:[1,42],62:100,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],111:[1,31],112:[1,30]},{11:[1,66],23:29,33:[1,42],66:101,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],111:[1,31],112:[1,30]},{11:[2,100],33:[2,100],73:[2,100],74:[2,100],82:[2,100],86:[2,100],111:[2,100],112:[2,100]},{11:[2,101],33:[2,101],73:[2,101],74:[2,101],82:[2,101],86:[2,101],111:[2,101],112:[2,101]},{11:[2,102],33:[2,102],73:[2,102],74:[2,102],82:[2,102],86:[2,102],111:[2,102],112:[2,102]},{11:[2,103],33:[2,103],73:[2,103],74:[2,103],82:[2,103],86:[2,103],111:[2,103],112:[2,103]},{11:[2,104],33:[2,104],73:[2,104],74:[2,104],82:[2,104],86:[2,104],111:[2,104],112:[2,104]},{11:[2,105],33:[2,105],73:[2,105],74:[2,105],82:[2,105],86:[2,105],111:[2,105],112:[2,105]},{11:[2,106],33:[2,106],73:[2,106],74:[2,106],82:[2,106],86:[2,106],111:[2,106],112:[2,106]},{11:[2,107],33:[2,107],73:[2,107],74:[2,107],82:[2,107],86:[2,107],111:[2,107],112:[2,107]},{11:[1,66],23:29,33:[1,42],68:102,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],111:[1,31],112:[1,30]},{11:[2,108],33:[2,108],73:[2,108],74:[2,108],82:[2,108],86:[2,108],111:[2,108],112:[2,108]},{11:[2,109],33:[2,109],73:[2,109],74:[2,109],82:[2,109],86:[2,109],111:[2,109],112:[2,109]},{11:[2,110],33:[2,110],73:[2,110],74:[2,110],82:[2,110],86:[2,110],111:[2,110],112:[2,110]},{12:[2,50],24:[2,50],36:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],54:[2,50],55:[2,50],56:[2,50],57:[2,50],83:[2,50],89:[2,50],98:[2,50],99:[2,50],100:[2,50],101:[2,50],102:[2,50],105:[2,50],106:[2,50],107:[2,50],108:[2,50],109:[2,50],110:[2,50],111:[2,50],112:[2,50],113:[2,50],114:[2,50],115:[2,50]},{11:[1,66],23:29,33:[1,42],68:103,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],111:[1,31],112:[1,30]},{11:[1,104]},{11:[1,66],23:29,33:[1,42],41:105,53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[2,113],33:[2,113],52:106,73:[2,113],74:[2,113],82:[2,113],83:[2,113],84:61,86:[2,113],103:[2,113],104:[2,113],111:[2,113],112:[2,113]},{92:[1,107]},{92:[1,108]},{83:[1,109]},{36:[1,110]},{11:[1,66],23:113,33:[1,42],73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],88:111,89:[2,119],90:112},{11:[2,82],13:114,14:[2,82],18:[2,82],33:[2,82],37:[2,82],51:[2,82],73:[2,82],74:[2,82],82:[2,82],86:[2,82],103:[2,82],104:[2,82],111:[2,82],112:[2,82]},{12:[2,22],19:[1,87],33:[1,84],82:[1,85],86:[1,86],89:[2,22],91:[1,83],98:[2,22]},{55:[1,115]},{57:[1,116],59:56,99:[1,57],100:[1,58]},{12:[2,38],24:[2,38],36:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[2,38],47:[2,38],54:[2,38],55:[2,38],56:[2,38],57:[2,38],61:62,83:[2,38],89:[2,38],98:[2,38],99:[2,38],100:[2,38],101:[1,63],102:[1,64]},{12:[2,32],89:[2,32],98:[2,32]},{12:[2,65],36:[2,65],83:[2,65],89:[2,65],98:[2,65]},{12:[2,116],24:[1,117],36:[2,116],83:[2,116],89:[2,116],98:[2,116]},{12:[2,40],24:[2,40],36:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],54:[2,40],55:[2,40],56:[2,40],57:[2,40],83:[2,40],89:[2,40],98:[2,40],99:[2,40],100:[2,40],101:[2,40],102:[2,40]},{12:[2,44],24:[2,44],36:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],54:[2,44],55:[2,44],56:[2,44],57:[2,44],83:[2,44],89:[2,44],98:[2,44],99:[2,44],100:[2,44],101:[2,44],102:[2,44]},{12:[2,46],24:[2,46],36:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],54:[2,46],55:[2,46],56:[2,46],57:[2,46],69:77,83:[2,46],89:[2,46],98:[2,46],99:[2,46],100:[2,46],101:[2,46],102:[2,46],105:[2,46],106:[2,46],107:[2,46],108:[2,46],109:[2,46],110:[2,46],111:[2,46],112:[2,46],113:[1,78],114:[1,79],115:[1,80]},{12:[2,48],24:[2,48],36:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],83:[2,48],89:[2,48],98:[2,48],99:[2,48],100:[2,48],101:[2,48],102:[2,48],105:[2,48],106:[2,48],107:[2,48],108:[2,48],109:[2,48],110:[2,48],111:[2,48],112:[2,48],113:[2,48],114:[2,48],115:[2,48]},{12:[2,52],24:[2,52],36:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],83:[2,52],89:[2,52],98:[2,52],99:[2,52],100:[2,52],101:[2,52],102:[2,52],105:[2,52],106:[2,52],107:[2,52],108:[2,52],109:[2,52],110:[2,52],111:[2,52],112:[2,52],113:[2,52],114:[2,52],115:[2,52]},{12:[2,68],19:[2,68],24:[2,68],26:[2,68],33:[2,68],36:[2,68],43:[2,68],44:[2,68],45:[2,68],46:[2,68],47:[2,68],54:[2,68],55:[2,68],56:[2,68],57:[2,68],72:[2,68],82:[2,68],83:[2,68],86:[2,68],89:[2,68],91:[2,68],98:[2,68],99:[2,68],100:[2,68],101:[2,68],102:[2,68],105:[2,68],106:[2,68],107:[2,68],108:[2,68],109:[2,68],110:[2,68],111:[2,68],112:[2,68],113:[2,68],114:[2,68],115:[2,68]},{36:[1,118]},{83:[1,119]},{11:[2,123],92:[2,123],93:120,95:121},{11:[2,123],92:[2,123],93:122,95:121},{12:[2,63],19:[2,63],24:[2,63],26:[2,63],33:[2,63],36:[2,63],43:[2,63],44:[2,63],45:[2,63],46:[2,63],47:[2,63],54:[2,63],55:[2,63],56:[2,63],57:[2,63],72:[2,63],82:[2,63],83:[2,63],86:[2,63],89:[2,63],91:[2,63],98:[2,63],99:[2,63],100:[2,63],101:[2,63],102:[2,63],105:[2,63],106:[2,63],107:[2,63],108:[2,63],109:[2,63],110:[2,63],111:[2,63],112:[2,63],113:[2,63],114:[2,63],115:[2,63]},{12:[2,64],19:[2,64],24:[2,64],26:[2,64],33:[2,64],36:[2,64],43:[2,64],44:[2,64],45:[2,64],46:[2,64],47:[2,64],54:[2,64],55:[2,64],56:[2,64],57:[2,64],72:[2,64],82:[2,64],83:[2,64],86:[2,64],89:[2,64],91:[2,64],98:[2,64],99:[2,64],100:[2,64],101:[2,64],102:[2,64],105:[2,64],106:[2,64],107:[2,64],108:[2,64],109:[2,64],110:[2,64],111:[2,64],112:[2,64],113:[2,64],114:[2,64],115:[2,64]},{89:[1,123]},{24:[1,124],89:[2,120]},{19:[1,87],26:[1,125],33:[1,84],82:[1,85],86:[1,86],91:[1,83]},{9:130,11:[1,16],14:[1,126],15:127,16:128,17:129,18:[1,131],23:29,33:[1,42],37:[1,132],40:13,41:11,48:12,49:14,51:[1,17],53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[1,66],23:29,33:[1,42],41:133,53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[1,66],23:29,33:[1,42],41:134,53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[2,114],12:[2,114],33:[2,114],36:[2,114],73:[2,114],74:[2,114],82:[2,114],83:[2,114],86:[2,114],89:[2,114],98:[2,114],103:[2,114],104:[2,114],111:[2,114],112:[2,114]},{12:[2,69],19:[2,69],24:[2,69],26:[2,69],33:[2,69],36:[2,69],43:[2,69],44:[2,69],45:[2,69],46:[2,69],47:[2,69],54:[2,69],55:[2,69],56:[2,69],57:[2,69],72:[2,69],82:[2,69],83:[2,69],86:[2,69],89:[2,69],91:[2,69],98:[2,69],99:[2,69],100:[2,69],101:[2,69],102:[2,69],105:[2,69],106:[2,69],107:[2,69],108:[2,69],109:[2,69],110:[2,69],111:[2,69],112:[2,69],113:[2,69],114:[2,69],115:[2,69]},{12:[2,70],19:[2,70],24:[2,70],26:[2,70],33:[2,70],36:[2,70],43:[2,70],44:[2,70],45:[2,70],46:[2,70],47:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],72:[2,70],82:[2,70],83:[2,70],86:[2,70],89:[2,70],91:[2,70],98:[2,70],99:[2,70],100:[2,70],101:[2,70],102:[2,70],105:[2,70],106:[2,70],107:[2,70],108:[2,70],109:[2,70],110:[2,70],111:[2,70],112:[2,70],113:[2,70],114:[2,70],115:[2,70]},{92:[1,135]},{11:[1,137],92:[2,125],96:136},{92:[1,138]},{12:[2,66],19:[2,66],24:[2,66],26:[2,66],33:[2,66],36:[2,66],43:[2,66],44:[2,66],45:[2,66],46:[2,66],47:[2,66],54:[2,66],55:[2,66],56:[2,66],57:[2,66],72:[2,66],82:[2,66],83:[2,66],86:[2,66],89:[2,66],91:[2,66],98:[2,66],99:[2,66],100:[2,66],101:[2,66],102:[2,66],105:[2,66],106:[2,66],107:[2,66],108:[2,66],109:[2,66],110:[2,66],111:[2,66],112:[2,66],113:[2,66],114:[2,66],115:[2,66]},{11:[2,118],33:[2,118],73:[2,118],74:[2,118],82:[2,118],86:[2,118],89:[2,118]},{11:[1,66],23:139,33:[1,42],73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43]},{12:[2,4],98:[2,4]},{12:[1,140]},{12:[2,5]},{12:[2,6]},{12:[2,7]},{19:[1,141]},{11:[1,143],19:[2,90],38:142},{12:[2,35],24:[2,35],36:[2,35],43:[2,35],44:[2,35],45:[2,35],46:[2,35],47:[2,35],55:[2,35],83:[2,35],89:[2,35],98:[2,35]},{12:[2,36],24:[2,36],36:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36],55:[2,36],83:[2,36],89:[2,36],98:[2,36]},{9:144,11:[1,16],23:29,33:[1,42],40:13,41:11,48:12,49:14,51:[1,17],53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{92:[2,73]},{24:[1,145],92:[2,126]},{12:[1,146]},{19:[1,87],24:[2,67],33:[1,84],82:[1,85],86:[1,86],89:[2,67],91:[1,83]},{11:[2,83],14:[2,83],18:[2,83],33:[2,83],37:[2,83],51:[2,83],73:[2,83],74:[2,83],82:[2,83],86:[2,83],103:[2,83],104:[2,83],111:[2,83],112:[2,83]},{12:[1,147]},{19:[1,148]},{19:[2,91]},{89:[1,149]},{11:[2,124],92:[2,124]},{11:[2,121],14:[2,121],33:[2,121],51:[2,121],73:[2,121],74:[2,121],82:[2,121],86:[2,121],94:150,103:[2,121],104:[2,121],111:[2,121],112:[2,121]},{14:[2,84],20:151,22:[2,84],28:[2,84],29:[2,84],30:[2,84],31:[2,84],32:[2,84]},{12:[1,152]},{12:[2,71],19:[2,71],24:[2,71],26:[2,71],33:[2,71],36:[2,71],43:[2,71],44:[2,71],45:[2,71],46:[2,71],47:[2,71],54:[2,71],55:[2,71],56:[2,71],57:[2,71],72:[2,71],82:[2,71],83:[2,71],86:[2,71],89:[2,71],91:[2,71],98:[2,71],99:[2,71],100:[2,71],101:[2,71],102:[2,71],105:[2,71],106:[2,71],107:[2,71],108:[2,71],109:[2,71],110:[2,71],111:[2,71],112:[2,71],113:[2,71],114:[2,71],115:[2,71]},{9:154,11:[1,16],14:[1,153],23:29,33:[1,42],40:13,41:11,48:12,49:14,51:[1,17],53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{14:[1,155],21:156,22:[1,157],27:158,28:[1,159],29:[1,160],30:[1,161],31:[1,162],32:[1,163]},{11:[2,92],14:[2,92],33:[2,92],39:164,73:[2,92],74:[2,92],82:[2,92],86:[2,92],103:[2,92],104:[2,92],111:[2,92],112:[2,92]},{12:[2,72],19:[2,72],24:[2,72],26:[2,72],33:[2,72],36:[2,72],43:[2,72],44:[2,72],45:[2,72],46:[2,72],47:[2,72],54:[2,72],55:[2,72],56:[2,72],57:[2,72],72:[2,72],82:[2,72],83:[2,72],86:[2,72],89:[2,72],91:[2,72],98:[2,72],99:[2,72],100:[2,72],101:[2,72],102:[2,72],105:[2,72],106:[2,72],107:[2,72],108:[2,72],109:[2,72],110:[2,72],111:[2,72],112:[2,72],113:[2,72],114:[2,72],115:[2,72]},{12:[1,165]},{12:[2,8]},{12:[1,166]},{11:[1,66],23:167,33:[1,42],73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43]},{11:[1,66],23:168,33:[1,42],73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43]},{11:[2,15],33:[2,15],73:[2,15],74:[2,15],82:[2,15],86:[2,15]},{11:[2,16],33:[2,16],73:[2,16],74:[2,16],82:[2,16],86:[2,16]},{11:[2,17],33:[2,17],73:[2,17],74:[2,17],82:[2,17],86:[2,17]},{11:[2,18],33:[2,18],73:[2,18],74:[2,18],82:[2,18],86:[2,18]},{11:[2,19],33:[2,19],73:[2,19],74:[2,19],82:[2,19],86:[2,19]},{11:[1,66],14:[1,169],23:29,33:[1,42],40:170,41:171,53:15,58:18,60:19,62:20,63:21,64:22,66:25,68:26,70:27,71:28,73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43],103:[1,23],104:[1,24],111:[1,31],112:[1,30]},{11:[2,122],14:[2,122],33:[2,122],51:[2,122],73:[2,122],74:[2,122],82:[2,122],86:[2,122],103:[2,122],104:[2,122],111:[2,122],112:[2,122]},{14:[2,85],22:[2,85],28:[2,85],29:[2,85],30:[2,85],31:[2,85],32:[2,85]},{12:[2,9],19:[1,87],24:[1,172],33:[1,84],82:[1,85],86:[1,86],91:[1,83]},{12:[2,12],19:[1,87],24:[1,173],33:[1,84],82:[1,85],86:[1,86],91:[1,83]},{12:[2,21]},{12:[1,174]},{42:48,43:[1,49],44:[1,50],45:[1,51],46:[1,52],47:[1,53]},{25:175,33:[1,176]},{25:177,33:[1,176]},{11:[2,93],14:[2,93],33:[2,93],73:[2,93],74:[2,93],82:[2,93],86:[2,93],103:[2,93],104:[2,93],111:[2,93],112:[2,93]},{12:[2,10],26:[1,178]},{11:[2,86],33:[2,86],34:179,36:[2,86],73:[2,86],74:[2,86],82:[2,86],86:[2,86]},{12:[2,13],26:[1,180]},{25:181,33:[1,176]},{11:[1,66],23:183,33:[1,42],35:182,36:[2,88],73:[1,32],74:[1,33],75:34,76:35,77:36,78:37,79:38,80:39,81:40,82:[1,41],86:[1,43]},{25:184,33:[1,176]},{12:[2,11]},{36:[1,185]},{19:[1,87],24:[1,186],33:[1,84],36:[2,89],82:[1,85],86:[1,86],91:[1,83]},{12:[2,14]},{12:[2,20],26:[2,20]},{11:[2,87],33:[2,87],36:[2,87],73:[2,87],74:[2,87],82:[2,87],86:[2,87]}],
defaultActions: {5:[2,1],7:[2,81],128:[2,5],129:[2,6],130:[2,7],136:[2,73],143:[2,91],155:[2,8],169:[2,21],181:[2,11],184:[2,14]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var ast = require('./bloom_ast');

/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* ignore require statements */ 
break;
case 1: /* ignore include statements */ 
break;
case 2: /* backslash concatenates lines, skip comments */ 
break;
case 3:return 12 // skip comments and blank lines
break;
case 4: /* skip whitespace other than newline */ 
break;
case 5:return 10
break;
case 6:return 18
break;
case 7:return 37
break;
case 8:return 28
break;
case 9:return 29
break;
case 10:return 30
break;
case 11:return 22
break;
case 12:return 31
break;
case 13:return 32
break;
case 14:return 19
break;
case 15:return 14
break;
case 16:return 51
break;
case 17:return 11
break;
case 18:return 73
break;
case 19:return 74
break;
case 20:return 98
break;
case 21:return 26
break;
case 22:return 43
break;
case 23:return 44
break;
case 24:return 45
break;
case 25:return 46
break;
case 26:return 47
break;
case 27:return 107
break;
case 28:return 110
break;
case 29:return 108
break;
case 30:return 109
break;
case 31:return 105
break;
case 32:return 106
break;
case 33:return 50
break;
case 34:return 72
break;
case 35:return 115
break;
case 36:return 113
break;
case 37:return 114
break;
case 38:return 111
break;
case 39:return 112
break;
case 40:return 91
break;
case 41:return 24
break;
case 42:return 55
break;
case 43:return 92
break;
case 44:return 82
break;
case 45:return 83
break;
case 46:return 33
break;
case 47:return 36
break;
case 48:return 86
break;
case 49:return 89
break;
case 50:return 'INVALID'
break;
}
},
rules: [/^(?:[ \t\r]*require.*\n+)/,/^(?:[ \t\r]*include.*\n+)/,/^(?:\\[ \t\r]*(#.*)?(\n))/,/^(?:([ \t\r]*(#.*)?\n)+)/,/^(?:\s+)/,/^(?:class\b)/,/^(?:state\b)/,/^(?:bloom\b)/,/^(?:table\b)/,/^(?:scratch\b)/,/^(?:interface\b)/,/^(?:channel\b)/,/^(?:loopback\b)/,/^(?:periodic\b)/,/^(?:do\b)/,/^(?:end\b)/,/^(?:puts\b)/,/^(?:([_A-Za-z][_A-Za-z0-9]*))/,/^(?:(("([^"\\]|\\.)*"|'([^'\\]|\\.)*')))/,/^(?:((\+|)?([0-9]+(\.[0-9]*)?|\.[0-9]+)))/,/^(?:(#.*)?$)/,/^(?:=>)/,/^(?:<:)/,/^(?:<~)/,/^(?:<\+-)/,/^(?:<\+)/,/^(?:<-)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\*\*)/,/^(?:%)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:\|)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = bloom_parser;
exports.Parser = bloom_parser.Parser;
exports.parse = function () { return bloom_parser.parse.apply(bloom_parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}